for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s)
return(df)
}
}
}
data <- map_df(files, import_tech_tables)
View(data)
df <- data %>%
select(ID, `Tollgate Recommendations`:`...19`) %>%
filter(!is.na(`...16`) & !is.na(`...17`) & !is.na(`...18`) & !is.na(`...19`))
unique((data$ID))
files
files = files[1:10]
files
data = list()
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s)
rbind(data, df)
}
}
data = data.frame()
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s)
rbind(data, df)
}
}
files = files[1:3]
files
data = list()
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s)
data$s = df
}
}
View(data)
data = list()
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s)
data <- append(df)
}
}
data = list()
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s)
data <- append(data, df)
}
}
View(data)
data = data.frame()
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s)
map_df(data, df)
}
}
import_tech_tables <- function(files) {
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s)
}
}
}
data <- map_df(files, import_tech_tables)
import_tech_tables <- function(files) {
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s) %>%
return()
}
}
}
data <- map_df(files, import_tech_tables)
import_tech_tables <- function(files) {
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
read_excel(file, s) %>%
mutate(ID = s) %>%
return()
print(paste0(s, " added from ", file))
}
}
}
data <- map_df(files, import_tech_tables)
import_tech_tables <- function(files) {
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s)
print(paste0(s, " added from ", file))
return(df)
}
}
}
data <- map_df(files, import_tech_tables)
import_tech_tables <- function(files) {
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
for (s in sheets) {
df = read_excel(file, s) %>%
mutate(ID = s)
print(paste0(s, " added from ", file))
return(df)
}
}
}
data <- map_df(files, import_tech_tables)
import_tech_tables <- function(files) {
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
df = data.frame()
for (s in sheets) {
x = read_excel(file, s) %>%
mutate(ID = s)
print(paste0(s, " added from ", file))
rbind(df, x)
}
return(df)
}
}
data <- map_df(files, import_tech_tables)
df = data.frame()
x = read_excel(file, s) %>%
mutate(ID = s)
print(paste0(s, " added from ", file))
rbind(df, x)
x = read_excel(file, s) %>%
mutate(ID = s)
print(paste0(s, " added from ", file))
df = rbind(df, x)
import_tech_tables <- function(files) {
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
df = data.frame()
for (s in sheets) {
x = read_excel(file, s) %>%
mutate(ID = s)
print(paste0(s, " added from ", file))
df = rbind(df, x)
}
return(df)
}
}
data <- map_df(files, import_tech_tables)
View(data)
df <- data %>%
select(ID, `Tollgate Recommendations`:`...19`) %>%
filter(!is.na(`...16`) & !is.na(`...17`) & !is.na(`...18`) & !is.na(`...19`))
View(df)
df <- data %>%
select(ID, `Tollgate Recommendations`:`...19`) %>%
filter((!is.na(`...16`) | `...16` == "Object") & (!is.na(`...17`) | `...17` == "Subobject") &
(!is.na(`...18`) | `...18` == "Amount") & (!is.na(`...19`) | `...19` == "Decision"))
View(df)
df <- data %>%
select(ID, `Tollgate Recommendations`:`...19`) %>%
filter((!is.na(`...16`) | `...16` != "Object") & (!is.na(`...17`) | `...17` != "Subobject") &
(!is.na(`...18`) | `...18` != "Amount") & (!is.na(`...19`) | `...19` != "Decision"))
View(df)
df <- data %>%
select(ID, `Tollgate Recommendations`:`...19`) %>%
filter((!is.na(`...16`) & `...16` != "Object") & (!is.na(`...17`) & `...17` != "Subobject") &
(!is.na(`...18`) & `...18` != "Amount") & (!is.na(`...19`) & `...19` != "Decision"))
files <- list.files(path = "C:/Users/sara.brumfield2/OneDrive - City Of Baltimore/FY2024 Planning/03-TLS-BBMR Review/Agency Analysis Tools/",
pattern = paste0("^FY24 Change Table*"),
full.names = TRUE, recursive = TRUE)
import_tech_tables <- function(files) {
for (file in files) {
sheets = na.omit(str_extract(excel_sheets(file), "\\d{3}"))
df = data.frame()
for (s in sheets) {
x = read_excel(file, s) %>%
mutate(ID = s)
print(paste0(s, " added from ", file))
df = rbind(df, x)
}
return(df)
}
}
data <- map_df(files, import_tech_tables)
length(unique(data$ID))
rlang::last_error()
rlang::last_trace
files[36]
file
data <- map(files, import_tech_tables)
View(data)
?cbind
test = data %>%
bind_rows()
test <- data %>%
map(select, c(ID, `Tollgate Recommendations`:`...19`))
x = test %>%
bind_rows()
View(x)
df = data %>%
map(select, c(ID, `Tollgate Recommendations`:`...19`)) %>%
bind_rows() %>%
filter((!is.na(`...16`) & `...16` != "Object") & (!is.na(`...17`) & `...17` != "Subobject") &
(!is.na(`...18`) & `...18` != "Amount") & (!is.na(`...19`) & `...19` != "Decision"))
df = data %>%
map(select, c(ID, `Tollgate Recommendations`:`...19`)) %>%
bind_rows()
df = data %>%
map(select, c(ID, `Tollgate Recommendations`:`...19`)) %>%
bind_rows() %>%
filter((!is.na(`...3`) & `...3` != "Object") & (!is.na(`...4`) & `...4` != "Subobject") &
(!is.na(`...5`) & `...5` != "Amount") & (!is.na(`...6`) & `...6` != "Decision"))
View(df)
df = data %>%
map(select, c(ID, `Tollgate Recommendations`:`...19`)) %>%
bind_rows()
#check for all services
length(unique(df$ID))
View(df)
df = data %>%
map(select, c(ID, `Tollgate Recommendations`:`...18`)) %>%
bind_rows()
#check for all services
length(unique(df$ID))
#clean up the file
test <- df %>%
filter((!is.na(`...3`) & `...3` != "Object") & (!is.na(`...4`) & `...4` != "Subobject") &
(!is.na(`...5`) & `...5` != "Amount"))
View(test)
test <- df %>%
filter((!is.na(`...3`) & `...3` != "Object") & (!is.na(`...4`) & `...4` != "Subobject") &
(!is.na(`...5`) & `...5` != "Amount")) %>%
rename(`Service ID` = ID, `Object` = `...3`, `Subobject` = `...4`, `Amount` = `...5`, `BPFS Adjustment` = `Tollgate Recommendations`)
View(test)
files
agency = str_extract(file, "((?<=C:/Users/sara.brumfield2/OneDrive - City Of Baltimore/FY2024 Planning/03-TLS-BBMR Review/Agency Analysis Tools/FY24 Change Table ).+(?=.xlsx))")
data <- import("L:/BBMR_CSV_FILE_20230104.CSV")
violations <- data %>%
mutate_at(vars(ends_with("DATE")), ymd) %>%
mutate(Fees = case_when(`VIOL CODE` %in% c(30, 31) ~ 75,
`VIOL CODE` %in% c(32, 33, 34, 35) ~ 40,
`VIOL CODE` == 36 ~ 0,
`VIOL CODE` == 37 ~ 125,
`VIOL CODE` == 38 ~ 250),
Type = case_when(`VIOL CODE` == 30 ~ "Red Light Violation",
`VIOL CODE` == 31 ~ "Right on Red",
`VIOL CODE` == 32 ~ "Speed Violation",
`VIOL CODE` == 33 ~ "No Description",
`VIOL CODE` == 34 ~ "No Description",
`VIOL CODE` == 35 ~ "No Description",
`VIOL CODE` == 36 ~ "No Description",
`VIOL CODE` == 37 ~ "No Description",
`VIOL CODE` == 38 ~ "No Description"),
`VIOL MONTH` = ymd(paste0(year(`VIOL DATE`), "-", month(`VIOL DATE`), "-01"))) %>%
mutate(Status = case_when(STATUS == "P" ~ "Paid in full",
STATUS == "O" ~ "Open",
(STATUS == "A" & is.na(`PAID DATE`)) ~ "Balance abated (unpaid)",
(STATUS == "A" & !is.na(`PAID DATE`)) ~ "Balance abated (paid)",
STATUS == "H" ~ "Hold processing",
STATUS == "U" ~ "Uncollectable",
TRUE ~ STATUS),
`Year` = format(`VIOL DATE`, format = "%Y"))
violations <- violations %>% mutate(`Year` = format(`VIOL DATE`, format = "%Y"),
`Month` = format(`VIOL DATE`, format = "%m"),
`Year-Month` = format(`VIOL DATE`, format = "%Y-%m"))
issued <- violations %>%
select(`Year-Month`, `CITATION`, `Type`, LOCATION) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = CITATION, values_fn = list(CITATION = length))
paid <- violations %>%
filter(Status %in% c("Paid in full", "Balance abated (paid)")) %>%
select(`Year-Month`, `CITATION`, `Type`, Status, LOCATION) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = CITATION, values_fn = list(CITATION = length))
status_count <- violations %>%
select(`Year-Month`, `CITATION`, `Type`) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = CITATION, values_fn = list(CITATION = length))
View(status_count)
status_count <- violations %>%
select(`Year-Month`, `CITATION`, `Type`, Status) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = CITATION, values_fn = list(CITATION = length))
View(status_count)
library(janitor)
status_fees <- violations %>%
select(`Year-Month`, Fees, `Type`, Status) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = Fees, values_fn = sum) %>%
arrange(Type, Status)
View(status_fees)
violations <- data %>%
mutate_at(vars(ends_with("DATE")), ymd) %>%
##filter out data from previous FYs starting Feb 2023
mutate(Fees = case_when(`VIOL CODE` %in% c(30, 31) ~ 75,
`VIOL CODE` %in% c(32, 33, 34, 35) ~ 40,
`VIOL CODE` == 36 ~ 0,
`VIOL CODE` == 37 ~ 125,
`VIOL CODE` == 38 ~ 250),
Type = case_when(`VIOL CODE` == 30 ~ "Red Light Violation",
`VIOL CODE` == 31 ~ "Right on Red",
`VIOL CODE` == 32 ~ "Speed Violation",
`VIOL CODE` == 33 ~ "No Description",
`VIOL CODE` == 34 ~ "No Description",
`VIOL CODE` == 35 ~ "No Description",
`VIOL CODE` == 36 ~ "No Description",
`VIOL CODE` == 37 ~ "No Description",
`VIOL CODE` == 38 ~ "No Description",
is.na(`VIOL CODE`) ~ "Unknown",
TRUE ~ `VIOL CODE`),
`VIOL MONTH` = ymd(paste0(year(`VIOL DATE`), "-", month(`VIOL DATE`), "-01"))) %>%
mutate(Status = case_when(STATUS == "P" ~ "Paid in full",
STATUS == "O" ~ "Open",
(STATUS == "A" & is.na(`PAID DATE`)) ~ "Balance abated (unpaid)",
(STATUS == "A" & !is.na(`PAID DATE`)) ~ "Balance abated (paid)",
STATUS == "H" ~ "Hold processing",
STATUS == "U" ~ "Uncollectable",
TRUE ~ STATUS),
`Year` = format(`VIOL DATE`, format = "%Y"))
violations <- data %>%
mutate_at(vars(ends_with("DATE")), ymd) %>%
##filter out data from previous FYs starting Feb 2023
mutate(Fees = case_when(`VIOL CODE` %in% c(30, 31) ~ 75,
`VIOL CODE` %in% c(32, 33, 34, 35) ~ 40,
`VIOL CODE` == 36 ~ 0,
`VIOL CODE` == 37 ~ 125,
`VIOL CODE` == 38 ~ 250),
Type = case_when(`VIOL CODE` == 30 ~ "Red Light Violation",
`VIOL CODE` == 31 ~ "Right on Red",
`VIOL CODE` == 32 ~ "Speed Violation",
`VIOL CODE` == 33 ~ "No Description",
`VIOL CODE` == 34 ~ "No Description",
`VIOL CODE` == 35 ~ "No Description",
`VIOL CODE` == 36 ~ "No Description",
`VIOL CODE` == 37 ~ "No Description",
`VIOL CODE` == 38 ~ "No Description",
is.na(`VIOL CODE`) ~ "Unknown",
TRUE ~ `VIOL CODE`),
`VIOL MONTH` = ymd(paste0(year(`VIOL DATE`), "-", month(`VIOL DATE`), "-01")),
Status = case_when(STATUS == "P" ~ "Paid in full",
STATUS == "O" ~ "Open",
(STATUS == "A" & is.na(`PAID DATE`)) ~ "Balance abated (unpaid)",
(STATUS == "A" & !is.na(`PAID DATE`)) ~ "Balance abated (paid)",
STATUS == "H" ~ "Hold processing",
STATUS == "U" ~ "Uncollectable",
TRUE ~ STATUS),
`Year` = format(`VIOL DATE`, format = "%Y"))
rlang::last_error()
rlang::last_trace()
violations <- data %>%
mutate_at(vars(ends_with("DATE")), ymd) %>%
##filter out data from previous FYs starting Feb 2023
mutate(Fees = case_when(`VIOL CODE` %in% c(30, 31) ~ 75,
`VIOL CODE` %in% c(32, 33, 34, 35) ~ 40,
`VIOL CODE` == 36 ~ 0,
`VIOL CODE` == 37 ~ 125,
`VIOL CODE` == 38 ~ 250),
Type = case_when(`VIOL CODE` == 30 ~ "Red Light Violation",
`VIOL CODE` == 31 ~ "Right on Red",
`VIOL CODE` == 32 ~ "Speed Violation",
`VIOL CODE` == 33 ~ "No Description",
`VIOL CODE` == 34 ~ "No Description",
`VIOL CODE` == 35 ~ "No Description",
`VIOL CODE` == 36 ~ "No Description",
`VIOL CODE` == 37 ~ "No Description",
`VIOL CODE` == 38 ~ "No Description",
is.na(`VIOL CODE`) ~ "Unknown"),
`VIOL MONTH` = ymd(paste0(year(`VIOL DATE`), "-", month(`VIOL DATE`), "-01")),
Status = case_when(STATUS == "P" ~ "Paid in full",
STATUS == "O" ~ "Open",
(STATUS == "A" & is.na(`PAID DATE`)) ~ "Balance abated (unpaid)",
(STATUS == "A" & !is.na(`PAID DATE`)) ~ "Balance abated (paid)",
STATUS == "H" ~ "Hold processing",
STATUS == "U" ~ "Uncollectable",
TRUE ~ STATUS),
`Year` = format(`VIOL DATE`, format = "%Y"))
unique(violations$Type)
violations <- data %>%
mutate_at(vars(ends_with("DATE")), ymd) %>%
##filter out data from previous FYs starting Feb 2023
mutate(Fees = case_when(`VIOL CODE` %in% c(30, 31) ~ 75,
`VIOL CODE` %in% c(32, 33, 34, 35) ~ 40,
`VIOL CODE` == 36 ~ 0,
`VIOL CODE` == 37 ~ 125,
`VIOL CODE` == 38 ~ 250),
Type = case_when(`VIOL CODE` == 30 ~ "Red Light Violation",
`VIOL CODE` == 31 ~ "Right on Red",
`VIOL CODE` == 32 ~ "Speed Violation",
`VIOL CODE` == 33 ~ "No Description",
`VIOL CODE` == 34 ~ "No Description",
`VIOL CODE` == 35 ~ "No Description",
`VIOL CODE` == 36 ~ "No Description",
`VIOL CODE` == 37 ~ "No Description",
`VIOL CODE` == 38 ~ "No Description",
`VIOL CODE` == NA ~ "Unknown"),
`VIOL MONTH` = ymd(paste0(year(`VIOL DATE`), "-", month(`VIOL DATE`), "-01")),
Status = case_when(STATUS == "P" ~ "Paid in full",
STATUS == "O" ~ "Open",
(STATUS == "A" & is.na(`PAID DATE`)) ~ "Balance abated (unpaid)",
(STATUS == "A" & !is.na(`PAID DATE`)) ~ "Balance abated (paid)",
STATUS == "H" ~ "Hold processing",
STATUS == "U" ~ "Uncollectable",
TRUE ~ STATUS),
`Year` = format(`VIOL DATE`, format = "%Y"))
unique(violations$Type)
unique(violations$`VIOL CODE`)
violations %>% filter(`VIOL CODE` == 2)
violations %>% filter(`VIOL CODE` == 3)
violations %>% filter(`VIOL CODE` == 99)
unique(violations$STATUS)
violations <- data %>%
mutate_at(vars(ends_with("DATE")), ymd) %>%
##filter out data from previous FYs starting Feb 2023
mutate(Fees = case_when(`VIOL CODE` %in% c(30, 31) ~ 75,
`VIOL CODE` %in% c(32, 33, 34, 35) ~ 40,
`VIOL CODE` == 36 ~ 0,
`VIOL CODE` == 37 ~ 125,
`VIOL CODE` == 38 ~ 250
`VIOL CODE` == 99 ~ 32,
violations <- data %>%
mutate_at(vars(ends_with("DATE")), ymd) %>%
##filter out data from previous FYs starting Feb 2023
mutate(Fees = case_when(`VIOL CODE` %in% c(30, 31) ~ 75,
`VIOL CODE` %in% c(32, 33, 34, 35) ~ 40,
`VIOL CODE` == 36 ~ 0,
`VIOL CODE` == 37 ~ 125,
`VIOL CODE` == 38 ~ 250,
`VIOL CODE` == 99 ~ 32,
`VIOL CODE` %in% c(2, 3) ~ 102),
Type = case_when(`VIOL CODE` == 30 ~ "Red Light Violation",
`VIOL CODE` == 31 ~ "Right on Red",
`VIOL CODE` == 32 ~ "Speed Violation",
`VIOL CODE` == 33 ~ "No Description",
`VIOL CODE` == 34 ~ "No Description",
`VIOL CODE` == 35 ~ "No Description",
`VIOL CODE` == 36 ~ "No Description",
`VIOL CODE` == 37 ~ "No Description",
`VIOL CODE` == 38 ~ "No Description",
`VIOL CODE` == 2 ~ "No Stopping or No Parking Pimlico Event",
`VIOL CODE` == 3 ~ "Obstruct/Impeding Flow of Traffic",
`VIOL CODE` == 99 ~ "All Other Stopping or Parking Violations",
`VIOL CODE` == NA ~ "Unknown"),
`VIOL MONTH` = ymd(paste0(year(`VIOL DATE`), "-", month(`VIOL DATE`), "-01")),
Status = case_when(STATUS == "P" ~ "Paid in full",
STATUS == "O" ~ "Open",
(STATUS == "A" & is.na(`PAID DATE`)) ~ "Balance abated (unpaid)",
(STATUS == "A" & !is.na(`PAID DATE`)) ~ "Balance abated (paid)",
STATUS == "H" ~ "Hold processing",
STATUS == "U" ~ "Uncollectable",
TRUE ~ STATUS),
`Year` = format(`VIOL DATE`, format = "%Y"))
violations <- violations %>% mutate(`Year` = format(`VIOL DATE`, format = "%Y"),
`Month` = format(`VIOL DATE`, format = "%m"),
`Year-Month` = format(`VIOL DATE`, format = "%Y-%m"))
issued <- violations %>%
select(`Year-Month`, `CITATION`, `Type`, LOCATION) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = CITATION, values_fn = list(CITATION = length))
paid <- violations %>%
filter(Status %in% c("Paid in full", "Balance abated (paid)")) %>%
select(`Year-Month`, `CITATION`, `Type`, Status, LOCATION) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = CITATION, values_fn = list(CITATION = length))
status_count <- violations %>%
select(`Year-Month`, `CITATION`, `Type`, Status) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = CITATION, values_fn = list(CITATION = length)) %>%
arrange(Type, Status)
status_fees <- violations %>%
select(`Year-Month`, Fees, `Type`, Status) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = Fees, values_fn = sum) %>%
arrange(Type, Status)
View(status_count)
View(status_fees)
?remove_empty
status_count <- violations %>%
select(`Year-Month`, `CITATION`, `Type`, Status) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = CITATION, values_fn = list(CITATION = length)) %>%
arrange(Type, Status) %>%
remove_empty(which = "rows", quiet = FALSE)
status_fees <- violations %>%
select(`Year-Month`, Fees, `Type`, Status) %>%
arrange(`Year-Month`) %>%
pivot_wider(names_from = `Year-Month`, values_from = Fees, values_fn = sum) %>%
arrange(Type, Status) %>%
remove_empty(which = "rows", quiet = FALSE)
View(status_count)
export_excel(issued, "Issued", paste0("outputs/Camera Violations ", Sys.Date() ,".xlsx"), "new")
export_excel(paid, "Paid", paste0("outputs/Camera Violations ", Sys.Date(), ".xlsx"), "existing")
export_excel(status_count, "Status", paste0("outputs/Camera Violations ", Sys.Date(), ".xlsx"), "existing")
